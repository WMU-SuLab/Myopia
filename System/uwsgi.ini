[uwsgi]
;服务器运行地址，可以指定多种协议：http 或 socket
socket = 127.0.0.1:8000
;socket = /xxx/uwsgi.sock
;http = 127.0.0.1:8000
;http-socekt=0.0.0.0:8000
#賦予 .sock 文件权限
chmod-socket = 660
;启动uwsgi的用户名和用户组
uid=root
gid=root
;项目目录
chdir = /data/Myopia/System
#指明Django的wsgi的地址
#使用文件的方式
;wsgi-file
;使用模块的方式
module = Config.wsgi:application
;环境变量
;env = LANG=en_US.UTF-8 DJANGO_SETTINGS_MODULE=Config.settings.product
;虚拟环境位置
;venv = xxx
;启动主进程，来管理其他进程，其它的uwsgi进程都是这个master进程的子进程，如果kill这个master进程，相当于重启所有的uwsgi进程
master = true
;多站模式
vhost = true
;多站模式时不设置入口模块和文件
no-site = true
# 进程数，同workers
processes = 2
# 每个进程的线程数
threads = 4
;允许用内嵌的语言启动线程。这将允许你在app程序中产生一个子线程来执行你的程序
enable-threads = true
;为每个工作进程设置请求数的上限。当一个工作进程处理的请求数达到这个值，那么该工作进程就会被回收重用（重启）。你可以使用这个选项来默默地对抗内存泄漏
max-requests = 5000
;在每个worker而不是master中加载应用
lazy-apps = true
#设置用于uwsgi包解析的内部缓存区大小为64k，默认是4k，单位是KB
buffer-size = 32768
;设置socket的监听队列大小，默认100
listen = 120
;设置在平滑的重启（直到接收到的请求处理完才重启）一个工作子进程中，等待这个工作结束的最长秒数
;这个配置会使在平滑地重启工作子进程中，如果工作进程结束时间超过了8秒就会被强行结束（忽略之前已经接收到的请求而直接结束）
reload-mercy = 8
;一个请求花费的时间超过了这个harakiri超时时间，那么这个请求都会被丢弃，并且当前处理这个请求的工作进程会被回收再利用（即重启）
harakiri = 60
;通过使用POSIX/UNIX的setrlimit()函数来限制每个uWSGI进程的虚拟内存使用数。这个配置会限制uWSGI的进程占用虚拟内存不超过256M
;如果虚拟内存已经达到256M，并继续申请虚拟内存则会使程序报内存错误，本次的http请求将返回500错误。
limit-as = 256
;当服务器退出、重启的时候自动删除unix socket文件和pid文件
vacuum = true
;设置uwsgi的status文件
statusfile = /XXX/XXX.status
;设置uwsgi的pid文件
pidfile = /var/run/uwsgi8000.pid
;存储日志信息
;logto = /XXX/XXX/XXX.log
;使进程在后台运行，并将日志打到指定的日志文件或者udp服务器
daemonize = /data/Myopia/System/logs/uwsgi/access.log
;设置最大日志文件大小
log-maxsize = 5000000
;禁用请求日志记录
disable-logging = true